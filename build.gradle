/*
 * SPDX-License-Identifier: Apache-2.0
 */
plugins {
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '5.1.0'
    id 'java'
    id 'jacoco'
}

version '0.0.1'
group = 'com.wetrade'

sourceCompatibility = 1.8

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url 'https://jitpack.io'
    }
    maven {
        url "https://nexus.hyperledger.org/content/repositories/snapshots/"
    }

}

dependencies {
    compile group: 'org.hyperledger.fabric-chaincode-java', name: 'fabric-chaincode-shim', version: '1.4.2'
    implementation ('com.wetrade:ledger-api') {
         version {
            branch = 'master'
        }
    }

    testImplementation 'org.junit.jupiter:junit-jupiter:5.4.2'
    testImplementation 'org.assertj:assertj-core:3.11.1'
    testImplementation 'org.mockito:mockito-core:2.+'
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

shadowJar {
    baseName = 'assets'
    version = version
    classifier = null
}

jacoco {
    toolVersion = "0.7.9"
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
}

jacocoTestCoverageVerification {

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude:  [
                    'com/wetrade/assets/utils/Constants.*',
            ])
        })
    }

    violationRules {
        rule {
            limit {
                minimum = 1.00
            }
        }

        rule {
            enabled = false
            element = 'CLASS'
            includes = ['com.wetrade.assets.utils.Constants']

            limit {
                minimum = 0
            }
        }
    }
}

test.finalizedBy(jacocoTestReport)
test.finalizedBy(jacocoTestCoverageVerification)


tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation" << "-parameters"
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from(components.java)
        }
    }
}

build.dependsOn(shadowJar);
